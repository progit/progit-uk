[[_git_svn]]
==== Git та Subversion

(((Subversion)))(((Interoperation with other VCSs, Subversion)))
Велика частина проектів з вільним кодом та чимало корпоративних проектів використовують Subversion для керування вихідним кодом.
Він існує вже більш ніж десятиріччя, та більшість цього час був _де факто_ вибором СКВ для проектів з вільним кодом.
Він також багато в чому дуже схожий на CVS, який був великим цабе у світі керування кодом перед тим.

(((git commands, svn)))(((git-svn)))
Однією з чудових функцій Git є двобічний звʼязок з Subversion під назвою `git svn`.
Цей інструмент дозволяє вам використовувати Git як клієнт для сервера Subversion, отже ви можете використовувати весь локальний функціонал Git, а потім надсилати зміни до сервера Subversion, ніби ви використовували Subversion локально.
Це означає, що ви можете використовувати локальні гілки та зливання, індекс, перебазування та висмикувавання тощо, доки ваші співробітники продовжують працювати своїми темними старожитними методами.
Це гарний спосіб проникнути з Git до корпоративного середовища та допомогти вашим співпрацівникам стати ефективнішими в той час, як ви просуваєте зміну інфраструктури для повної підтримки Git.
Міст Subversion -- це безкоштовна доза наркотиків у світі розподілених систем керування версіями.

===== `git svn`

Базова команда Git для всіх команд мосту Subversion -- `git svn`.
Вона приймає доволі багато команд, отже ми покажемо найпоширеніші під час розгляду декількох простих процесів роботи.

Важливо зазначити, що коли ви використовуєте `git svn`, то взаємодієте зі Subversion, який є системою, що працює геть іншим чином, порівняно з Git.
Хоча ви *можете* виконувати локальне галуження та зливання, зазвичай найкраще зберігати історію якомога лінійнішою за допомогою перебазування, та уникати чогось на кшталт взаємодії з віддаленим сховищем Git.

Не переписуйте історії та не намагайтесь знову надіслати зміни, та не надсилайте до паралельного сховища Git для взаємодії зі співробітниками, які використовують Git.
Subversion може мати лише єдину лінійну історію, та заплутати його дуже легко.
Якщо ви працюєте в команді, і дехто використовує SVN, а інші -- Git, переконайтесь, що всі використовують сервер SVN для взаємодії -- це зробить ваше життя легшим.

===== Налаштування

Задля демонстрації цього функціоналу, вам потрібне звичайне сховище SVN, до якого у вас є доступ на запис.
Якщо бажаєте виконувати подальші приклади, вам треба створити копію якогось тестового SVN сховища з правом на запис.
Щоб зробити це легко, ви можете використати інструмент під назвою `svnsync`, який постачається разом зі Subversion.

Щоб схоплювати думку, вам спочатку треба створити локальне сховище Subversion:

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

Потім, дозволити всім користувачам змінювати revprops -- це просто зробити, якщо додати скрипт `pre-revprop-change`, який завжди повертає 0:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Тепер ви можете синхронізувати цей проект на вашій локальній машині -- для цього треба викликати `svnsync init` з параметрами ``до якого'' та ``з якого'' сховища синхронізувати.

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/
----

Це налаштовує властивості (properties) для виконання синхронізації.
Потім треба зробити клонування коду, виконавши

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

Хоча ця операція може потребувати лише кілька хвилин, якщо ви спробуєте скопіювати оригінальне сховище до іншого віддаленого, замість локального, процес займе близько години, навіть якщо там менше ніж 100 комітів.
Subversion має клонувати одну ревізію за раз та потім надсилати її до іншого сховища -- це химерно неефективно, проте це єдиний простий спосіб.

===== Розпочинаємо

Тепер, коли у вас є сховище Subversion з доступом на запис, ви можете прослідкувати за типовим процесом роботи.
Ви почнете з команди `git svn clone`, яка імпортує весь репозиторій Subversion до локального сховища Git.
Памʼятайте: якщо ви імпортуєте зі справжнього розгорнутого (hosted) сховища Subversion, то маєте замінити `file:///tmp/test-svn` на URL вашого репозиторія Subversion:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Це еквівалентно виклику двох команд -- `git svn init` та потім `git svn fetch` -- з URL, який ви надали.
Це може бути довгим процесом.
Якщо, наприклад, тестовий проект має лише приблизно 75 комітів та невеликий за розміром код, Git все одно має отримати кожну версію, по одній за раз, та створювати коміти для кожної.
Для проекту зі сотнями чи тисячами комітів, це може дійсно потребувати годин або навіть днів, щоб завершитись.

Частина `-T trunk -b branches -t tags` каже Git, що цей репозиторій Subversion розташовує гілки та теґи як заведено.
Якщо у вас trunk, гілки чи теґи називаються інакше, ви можете змінити ці опції.
Через те, що ця частина дуже розповсюджена, її всю можна замінити на `-s`, що означає стандартне розташування та означає всі ці опції.
Наступна команда еквівалентна попередній:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

Наразі, у вас має бути працюючий репозиторій Git, який містить імпортовані гілки та теґи:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Завважте, цей інструмент працює з теґами Subversion як з віддаленими посиланнями.
(((git commands, show-ref)))
Подивімося прискіпливіше за допомогою кухонної команди Git `show-ref`:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

Git такого не робить, коли клонує з Git сервера; ось як сховище з теґами виглядає відразу після клонування:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Git отримує теґи напряму до `refs/tags`, замість того, щоб працювати з ними, як з віддаленими гілками.

===== Надсилання змін назад до Subversion

Тепер, коли у вас є робоча тека, ви можете попрацювати над проектом на надіслати свої коміти назад до першоджерела, використовуючи Git фактично як клієнт SVN.
Якщо ви відредагували один з файлів та зберегли його в коміті, то маєте коміт, що існує в Git локально, проте не існує на сервері Subversion:

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

Далі, вам треба надіслати свої зміни до першоджерела.
Завважте, як це змінює спосіб роботи з Subversion -- ви можете створити декілька комітів локально, та лише потім надіслати їх всіх разом до сервера Subversion.
Щоб надіслати до сервера Subversion, треба виконати команду `git svn dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Вона бере всі коміти, які ви створили поверху коду з сервера Subversion, робить коміт Subversion для кожного, та потім переписує ваші локальні коміти Git, щоб додати до них унікальний ідентифікатор.
Це важливо, оскільки означає, що всі SHA-1 суми ваших комітів зміняться.
Частково через це, робота з віддаленою версію проекту, яка працює на Git, та одночасно працювати з сервером Subversion, не є гарною ідеєю.
Якщо ви подивитесь на останній коміт, то побачите новий доданий `git-svn-id`:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Зверніть увагу, що раніше сума SHA-1 починалася з `4af61fd`, а після коміту починається з `95e0222`.
Якщо ви бажаєте надсилати зміни й до сервера Git, і до сервера Subversion, то маєте спочатку надіслати (`dcommit`) до Subversion, оскільки ця дія змінює дані комітів.

===== Отримання нових змін

Якщо ви працюєте з іншими розробниками, то колись хтось з вас надішле зміни, потім хтось інших спробує надіслати зміни, які призводять до конфлікту.
Ця зміна буде відхилена, доки ви не зіллєте їхню роботу.
З `git svn`, це виглядає так:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Щоб розвʼязати цю проблему, ви можете виконати `git svn rebase`, який отримує будь-які зміни на сервері, яких у вас поки що немає, та перебазовує всю роботу, яка у вас є поверху того, що є на сервері:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Тепер, вся ваша робота знаходиться поверху того, що є на сервері Subversion, отже ви можете успішно зробити `dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Зверніть увагу, що на відміну від Git, який вимагає від вас зливати роботу з першоджерела, якої у вас немає локально перед надсиланням, `git svn` вимагає від вас цього лише якщо зміни конфліктують (так само, як працює Subversion).
Якщо хтось інший надішле зміну до одного файлу, а потім ви надішлете зміну до іншого файлу, ваш `dcommit` спрацює без проблем:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Це важливо памʼятати, адже призводить до стану проекту, якого не існувало на жодному з клієнтів перед надсиланням.
Якщо зміни несумісні, хоча й не конфліктують, ви можете отримати проблеми, які важко виявити.
Це відрізняється від користування сервером Git -- у Git ви можете повністю перевірити стан на клієнтській системі перед його публікацією, а в SVN, ви навіть не можете бути певні, що стан прямо перед комітом та після нього однакові.

Вам також варто виконати наступну команду, щоб отримати зміни зі сервера Subversion, якщо ви не готові створити коміт.
Ви можете виконати `git svn fetch`, щоб взяти нові дані, проте `git svn rebase` і отримує дані, і оновлює ваші локальні коміти.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Виконуйте `git svn rebase` подеколи, щоб переконатися, що ваш код завжди синхронізовано.
Втім, вам треба переконатися, що робоча директорія чиста перед виконанням цієї команди.
Якщо у вас є локальні зміни, то треба або сховати їх, або тимчасово створити з них коміт перед виконанням `git svn rebase` -- інакше, команда зупиниться, якщо побачить, що перебазування призведе до конфліктів злиття.

===== Проблеми з галуженням Git

Коли ви звикаєте до процесу роботи Git, ви, вірогідно, створюєте тематичні гілки, працюєте в них, а потім зливаєте їх.
Якщо ви надсилаєте до сервера Subversion командою `git svn`, то можливо ліпше перебазувати вашу роботу поверху однієї гілки замість того, щоб зливати гілки разом.
Причина надати перевагу перебазуванню в тому, що Subversion має лінійну історію, та не працює зі зливаннями, як Git, отже `git svn` слідує лише за першими батьками, коли перетворює відбитки на коміти Subversion.

Припустімо, що ваша історія виглядає наступним чином: ви створили гілку `experiment`, зробили два коміти, а потім злили їх назад до `master`.
Коли ви зробите `dcommit`, то побачите щось таке:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Виконання `dcommit` на гілці зі злитою історією працює успішно, окрім того, що, якщо подивитись на історію проекту Git, то виявиться, що жоден з комітів, створених у гілці `experiment`, не переписано -- натомість, усі ці зміни зʼявляються у версії SVN як єдиний коміт злиття.

Коли хтось зробить клон цієї праці, усе, що вони побачать -- коміт зливання з усіма змінами в ньому, ніби ви виконали `git merge --squash`; вони не побачать дані про окремі коміти - коли вони були створені чи звідки взялися.

===== Галуження Subversion

Галуження Subversion не таке, як в Git: якщо ви можете уникнути його використання, то, напевно, найкраще це зробити.
Втім, ви можете створювати й надсилати коміти до гілок Subversion за допомогою `git svn`.

===== Створення нової гілки SVN

Щоб створити нову гілку Subversion, ви можете виконати `git svn branch [назва-нової-гілки]`:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

Це рівнозначно команді Subversion `svn copy trunk branches/opera` та виконується на сервері Subversion.
Важливо зазначити, що це не переключає вас до нової гілки; якщо ви зараз створите коміт, цей коміт піде до гілки `trunk` на сервері, а не до `opera`.

===== Переключення активних гілок

Git визначає, до якої гілки dcommit має надсилати ваші зміни наступним чином: знаходить верхівку будь-якої з ваших гілок Subversion в історії -- у вас має бути лише одна, та це має бути останній коміт з `git-svn-id` в історії вашої поточної гілки.

Якщо ви бажаєте працювати більш ніж з однією гілкою одночасно, то можете налаштувати локальні гілки робити `dcomit` до окремих гілок Subversion, якщо почнете їх за допомогою імпортування коміту з потрібної гілки Subversion.
Якщо вам потрібна гілка `opera`, над якою ви зможете працювати окремо, то можете виконати

[source,console]
----
$ git branch opera remotes/origin/opera
----

Тепер, якщо ви бажаєте злити свою гілку `opera` до `trunk` (ваша гілка `master`), то можете це зробити звичайним `git merge`.
Проте, ви маєте зробити повідомлення коміту змістовним (за допомогою `-m`), інакше злиття просто напише ``Merge branch opera'' замість чогось корисного.

Памʼятайте: хоча ви використовуєте `git merge` для цієї операції, і зливання напевно буде набагато легшим, ніж було б у Subversion (адже Git автоматично знайде відповідну базу для злиття), це не звичайний коміт злиття Git.
Ви маєте надіслати ці дані назад до серверу Subversion, який не може впоратись з комітом, який має більше одного батька; отже, після того, як ви його надішлете, він буде виглядати, як коміт, який зварив у собі всю роботу з іншої гілки.
Після зливання однієї гілки в іншу, ви не зможете легко повернутись назад та продовжити роботу в тій гілці, як зазвичай у Git.
Команда `dcommit`, яку ви виконуєте, стирає будь-яку інформацію про зливання гілки, отже наступні визначення бази для зливання будуть хибними -- `dcommit` призводить до того, що результат вашого `git merge` виглядає так, ніби ви виконали `git merge --squash`.
На жаль, не існує доладного способу уникнути цієї ситуації -- Subversion не може зберігати цю інформацію, отже ви завжди будете окалічені цими обмеженнями, доки використовуєте його як свій сервер.
Щоб уникнути проблем, варто вилучити локальну гілку (у даному випадку, `opera`) після зливання її до trunk.

===== Команди Subversion

Набір інструментів `git svn` пропонує чимало команд, щоб полегшити перехід до Git, для чого надає деякий функціонал, схожий на те, що було в Subversion.
Ось декілька команд, які надають вам те, що пропонував Subversion.

====== Історія в стилі SVN

Якщо ви звикли до Subversion та бажаєте бачити свою історію в стилі SVN, то можете виконати `git svn log`, щоб побачити історію комітів у форматі SVN:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

Ви маєте знати дві важливі речі про `git svn log`.
По-перше, вона працює без мережі, на відміну від справжньої команди `svn log`, яка робить запит до сервера Subversion.
По-друге, вона показує вам лише коміти, які були надіслані до сервера Subversion.
Локальні коміти Git, для яких ви ще не виконали dcommit, не показано; як і коміти, які інші надіслали до Subversion за цей час.
Це більше схоже на останній відомий стан комітів сервера Subversion.

====== Анотація SVN

Як команда `git svn log` імітує команду `svn log` поза мережею, так само ви можете отримати еквівалент `svn annotate`, якщо виконаєте `git svn blame [ФАЙЛ]`.
Вивід виглядатиме так:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Ще раз, тут не показано комітів, які ви зробили локально в Git, або які були надіслані до Subversion за цей час.

====== Інформація про сервер SVN

Ви також можете отримати інформацію на кшталт тієї, що надає вам `svn info`, якщо виконаєте `git svn info`:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

Це схоже на `blame` та `log` у тому, що виконується поза мережею та відповідає лише часу останнього звʼязку зі сервером Subversion.

====== Ігнорування того, що ігнорує Subversion

Якщо ви створите клон Subversion, який десь має встановлені властивості `svn:ignore`, ви напевно забажаєте створити відповідні файли `.gitignore`, щоб випадково не додати файли, які не треба.
`git svn` має дві команди, щоб допомогти з цим.
Перша -- це `git svn create-ignore`, яка автоматично створює відповідні файли `.gitignore`, отже ваш наступний коміт може включити їх.

Другою командою є `git svn show-ignore`, яка друкує до stdout рядки, які вам треба помістити до файлу `.gitignore`, щоб ви могли надіслати вивід до файлу exclude вашого проекту:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

Таким чином, вам не доведеться засмічувати проект файлами `.gitignore`.
Це гарна опція, якщо ви єдиний користувач Git у команді Subversion, та ваші співпрацівники не бажають файлів `.gitignore` у проекті.

===== Підсумок по git-svn

Інструменти `git svn` корисні, якщо ви захрясли зі сервером Subversion, чи іншим чином потрапили в середовище розробки, яке вимагає працюючого сервера Subversion.
Втім, ви маєте вважати їх покаліченим Git, інакше можете зіткнутися з проблемами переходу, які можуть спантеличити вас чи ваших співробітників.
Щоб уникнути проблем, намагайтесь слідувати таким порадам:

* Зберігайте лінійну історію Git, яка не містить комітів злиття, створених `git merge`.
  Перебазовуйте будь-яку роботу, що була створена поза головною гілкою поверху неї; не зливайте до неї.
* Не налаштовуйте співпрацю на окремому сервері Git.
  Можете мати один, щоб прискорити клонування для нових розробників, проте не надсилайте до нього нічого, що не має `git-svn-id`.
  Можливо навіть варто додати гак `pre-receive`, який перевіряє кожне повідомлення коміту, та відхиляє їх, якщо хтось намагається надіслати якийсь коміт без `git-svn-id`.

Якщо ви слідуватимете цим порадам, працю зі сервером Subversion буде легше витримати.
Втім, якщо є можливість перейти на справжній сервер Git, то це надасть вашій команді набагато більше переваг.
