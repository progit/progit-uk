[[_subtree_merge]]
===== Зливання піддерев

Ідея зливання піддерева в тому, що у вас два проекти, один з яких відповідає піддиректорії іншого.
Коли ви використовуєте зливання піддерев, Git зазвичай достатньо розумний, щоб визначити, що одне є піддеревом іншого та злити відповідно.

Ми розглянемо приклад додавання окремого проекту до вже існуючого, та зливання коду з другого до піддиректорії першого.

Спочатку, ми додамо застосунок Rack до вашого проекту.
Ми додамо проект Rack у якості віддаленого посилання до нашого проекту, а потім отримаємо його в окрему гілку:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote --no-tags
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

Тепер у нас є корінь проекту Rack у гілці `rack_branch` та наш власний проект у гілці `master`.
Якщо переключитись на одну, а потім на іншу, можна побачити, що в них різні корені:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

Це дещо дивна концепція.
Не всі гілки вашого репозиторія насправді мають бути гілками одного проекту.
Це не поширено, адже зрідка корисно, проте мати гілки, що містять цілковито різні історії, доволі легко.

У даному випадку, ми хочемо втягнути проект Rack до нашого проекту `master` в якості піддиректорії.
Ми можемо зробити це в Git за допомогою `git read-tree`.
Ви дізнаєтесь більше про `read-tree`, та йому подібних, у <<ch10-git-internals#ch10-git-internals>>, проте, поки що знайте, що вона зчитує корінь дерева однієї гілки до вашого поточного індексу та робочої директорії.
Ми щойно переключились назад до вашої гілки `master`, та втягуємо гілку `rack_branch` до піддиректорії нашої гілки `master` нашого головного проекту:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

Коли ми збережемо коміт, здається, ніби всі файли Rack є в тій піддиректорії – нібито ми скопіювали їх з архіву.
Цікаво те, що ми легко можемо зливати зміни з однієї гілки в іншу.
Отже, якщо проект Rack буде оновлено, ми зможемо отримати останні зміни, коли переключимося на ту гілку та виконаємо `pull`:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Потім, ми можемо злити ці зміни назад до нашої гілки `master`.
Щоб взяти зміни та отримати заповненим повідомлення коміту, використайте опцію `--squash`, а також опцію `-Xsubstree` стратегії зливання `recursive`.
(Рекурсивна стратегія зливання є типовою, проте ми включили її для ясності.)

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Усі зміни з проекту Rack злиті та готові до збереження в локальному коміті.
Ви можете робити й навпаки – зберігати зміни у піддиректорії `rack` вашої гілки master та потім зливати їх до гілки `rack_branch`, щоб пізніше відправити їх до супроводжувачів або надсилання до джерела проекту.

Це надає спосіб мати процес роботи схожий на процес роботи з підмодулями без використання підмодулів (які ми розглянемо в <<ch07-git-tools#_git_submodules>>).
Ми можемо зберігати гілки інших повʼязаних проектів у нашому репозиторії та іноді робити зливання піддерев з ними.
Це мило з якогось боку, наприклад, весь код збережено в одному місці.
Проте, є інші недоліки: це трохи складніше, та легше наробити помилок при реінтеграції змін або випадково надіслати гілку до геть не того репозиторія.

Ще одна трохи дивна річ: щоб отримати різницю між вашою піддиректорією `rack` та кодом у вашій гілці `rack_branch` – щоб побачити, чи треба їх зливати – ви не можете використовувати звичайну команду `diff`.
Замість цього, ви маєте виконати `git diff-tree` з гілкою, яку ви бажаєте порівняти зі своєю:

[source,console]
----
$ git diff-tree -p rack_branch
----

Або, щоб порівняти вашу піддиректорію `rack` зі змістом гілки `master`, що був на сервері, коли ви востаннє отримували звідти зміни, ви можете виконати:

[source,console]
----
$ git diff-tree -p rack_remote/master
----
