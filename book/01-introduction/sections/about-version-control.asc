=== Про систему контролю версій

(((version control)))
Що таке "`система контролю версій`", і чому це важливо?
Система контролю версій - це система, що записує зміни у файл або набір файлів протягом деякого часу, так що ви зможете повернутися до певної версії пізніше.
Для прикладів в цій книзі, як файли, що знаходяться під контролем версій, буде використано код програмного забезпечення, хоча, насправді, ви можете використовувати контроль версій практично для будь-яких типів файлів.

Якщо ви графічний або веб-дизайнер і хочете зберегти кожну версію зображення або макета (швидше за все, захочете), система контролю версій (далі СКВ) якраз те, що потрібно.
Вона дозволяє повернути вибрані файли до попереднього стану, повернути весь проєкт до попереднього стану, побачити зміни, побачити, хто останній міняв щось і спровокував проблему, хто вказав на проблему і коли, та багато іншого.
Використання СКВ також в цілому означає, що, якщо ви зламали щось або втратили файли, ви просто можете все виправити.
Крім того, ви отримаєте все це за дуже невеликі накладні витрати.

==== Локальні системи контролю версій

(((version control,local)))
Багато людей в якості одного з методів контролю версій застосовують копіювання файлів в окрему теку (можливо, навіть теку з відміткою за часом, якщо вони достатньо розумні).
Даний підхід є дуже поширеним завдяки його простоті, проте він, неймовірним чином, схильний до появи помилок.
Можна легко забути в якій теці ви знаходитеся і випадково змінити не той файл або скопіювати не ті файли, які ви хотіли.

Щоб справитися з цією проблемою, програмісти давно розробили локальні СКВ, що мають просту базу даних, яка зберігає всі зміни в файлах під контролем версій.

.Діаграма локальних систем контролю версій.
image::images/local.png[Local version control diagram]

Одним з найбільш поширених інструментів СКВ була система під назвою RCS, яка досі поширюється з багатьма комп'ютерами сьогодні.
https://www.gnu.org/software/rcs/[RCS^] зберігає набори латок (тобто, різницю між файлами) в спеціальному форматі на диску; вона може заново відтворити стан будь-якого файлу у будь-який момент часу, шляхом додавання всіх латок.

==== Централізовані системи контролю версій

(((version control,centralized)))
Наступним важливим питанням, з яким стикаються люди, є необхідність співпрацювати з іншими розробниками.
Щоб справитися з цією проблемою, були розроблені централізовані системи контролю версій (ЦСКВ).
Ці системи (такі як CVS, Subversion і Perforce) мають єдиний сервер, який містить всі версії файлів, та деяке число клієнтів, які отримують файли з центрального місця.(((CVS)))(((Subversion)))(((Perforce)))
Протягом багатьох років, це було стандартом для систем контролю версій.

.Діаграма централізованих систем контролю версій.
image::images/centralized.png[Centralized version control diagram]

Такий підхід має безліч переваг, особливо над локальними СКВ.
Наприклад, кожному учаснику проєкту відомо, певною мірою, чим займаються інші.
Адміністратори мають повний контроль над тим, хто і що може робити. Набагато легше адмініструвати ЦСКВ, ніж мати справу з локальними базами даних для кожного клієнта.

Але цей підхід також має деякі серйозні недоліки.
Найбільш очевидним є єдина точка відмови, яким є централізований сервер.
Якщо сервер виходить з ладу протягом години, то протягом цієї години ніхто не може співпрацювати або зберігати зміни над якими вони працюють під версійним контролем.
Якщо жорсткий диск центральної бази даних на сервері пошкоджено, і своєчасні резервні копії не були зроблені, ви втрачаєте абсолютно все -- всю історію проєкту, крім поодиноких відбитків проєкту, що збереглися на локальних машинах людей.
Локальні СКВ страждають тією ж проблемою -- щоразу, коли вся історія проєкту зберігається в одному місці, ви ризикуєте втратити все.

==== Розподілені системи контролю версій

(((version control,distributed)))
Ось тут до гри долучаються розподілені системи контролю версій (РСКВ).
В РСКВ (таких як, Git, Mercurial або Darcs), клієнти не просто отримують останній відбиток файлів репозиторія: натомість вони є повною копією сховища разом з усією його історією.
Таким чином, якщо вмирає який-небудь сервер, через який співпрацюють розробники, будь-яке з клієнтських сховищ може бути скопійований назад до серверу, щоб відновити його.
Кожна копія являє собою повну резервну копію всіх даних.

.Діаграма децентралізованих систем контролю версій.
image::images/distributed.png[Distributed version control diagram]

Більш того, багато з цих систем дуже добре взаємодіють з декількома віддаленими сховищами, так що ви можете співпрацювати з різними групами людей, застосовуючи різні підходи в межах одного проєкту одночасно.
Це дозволяє налаштувати декілька типів робочих процесів, таких як ієрархічні моделі, які неможливі в централізованих системах.
