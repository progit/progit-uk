[[_first_time]]
=== Початкове налаштування Git

Зараз, коли ви вже маєте Git у системі, можливо, ви захочете зробити декілька речей, щоб налаштувати ваше середовище Git.
Це потрібно виконати лише один раз - налаштування залишаються між оновленнями.
Ви також можете змінити їх у будь-який час, знову виконавши декілька команд.

До Git входить утиліта що має назву `git config`, яка дозволяє отримати чи встановити параметри, що контролюють усіма аспектами того, як Git виглядає чи працює.(((git commands, config)))
Ці параметри можуть бути збережені в трьох різних місцях:

1. Файл `[path]/etc/gitconfig` містить значення для кожного користувача в системі та всіх їхніх сховищ.
  Якщо ви передаєте опцію `--system` при виконанні `git config`, параметри читаються та пишуться з цього файлу.
  Оскільки це системний файл конфігурації, відповідно, вам знадобяться права адміністратора чи суперкористувача, щоб змінювати його.
2. Файл `~/.gitconfig` або `~/.config/git/config` зберігає значення саме для вас -- користувача.
  Ви можете спрямувати Git читати і писати в цей файл, передавши опцію `--global`, що вплине на _всі_ сховища з якими ви працюєте у вашій системі.
3. Файл `config` у теці Git (тобто `.git/config`) у тому сховищі, яке ви використовуєте в даний момент, зберігає налаштування цього конкретного сховища.
  Ви можете змусити Git читати і писати в цей файл, вказавши опцію `--local`, але типово використовується саме вона.
  Звісно, ви маєте бути десь у сховищі Git аби ця опція працювала правильно.

Кожен рівень має пріоритет над налаштуваннями в попередньому рівні, тобто параметри в `.git/config` перевизначають параметри в `[path]/etc/gitconfig`.

У системах Windows, Git шукає файл `.gitconfig` у теці `$HOME` (`C:\Users\$USER` для більшості користувачів).
Також, він все одно шукає файл `[path]/etc/gitconfig`, хоча й відносно кореня MSys, котрий знаходиться там, де ви вирішили встановити Git у вашій Windows системі, коли ви запускали інсталяцію.
Якщо ви використовуєте Git для Windows версії 2.x або новішу, то є також системний конфігураційний файл `C:\Documents and Settings\All Users\Application Data\Git\config` під Windows XP, а починаючи з Windows Vista -- `C:\ProgramData\Git\config`.
Цей файл може бути зміненим лише за допомогою `git config -f <файл>` адміністратором.

Ви можете переглянути усі ваші налаштування та звідки вони надходять виконавши:

[source,console]
----
$ git config --list --show-origin
----

==== Ім'я користувача

Перше, що ви повинні зробити, коли ви інсталюєте Git -- це встановити ім'я користувача та адресу електронної пошти.
Це важливо, тому що кожен коміт в Git використовує цю інформацію, і вона незмінно включена у коміти, які ви робите:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Знову ж таки, якщо ви передаєте опцію `--global`, ці налаштування потрібно зробити тільки один раз, бо тоді Git завжди буде використовувати цю інформацію для всього, що ви робите у цій системі.
Якщо ви хочете перевизначити ім'я або адресу електронної пошти для конкретних проєктів, ви можете виконати цю ж команду без опції `--global` в теці необхідного проєкту.

Багато з графічних інструментів допомагають зробити це при першому запуску.

[[_editor]]
==== Редактор

Зараз, коли ваше ім'я вже вказано, ви можете налаштувати типовий текстовий редактор, який буде використовуватися Git при необхідності ввести повідомлення.
Якщо це не налаштовано, Git буде використовувати типовий системний редактор.

Якщо ви бажаєте використовувати інший текстовий редактор, наприклад Emacs, необхідно зробити наступне:

[source,console]
----
$ git config --global core.editor emacs
----

Під Windows, якщо ви бажаєте використати інший текстовий редактор, то маєте вказати повний шлях до його виконуваного файлу.
Він може різнитися залежно від того, як ваш редактор поставляється.

У випадку Notepad++ -- популярного редактору коду -- ви напевно надасте перевагу 32-бітовій версії, адже на час написання цього тексу 64-бітова версія не підтримувала всіх додатків.
Якщо у вас 32-бітова система, чи у вас 64-бітова система і ви хочете використовувати 64-бітовий редактор, варто спробувати щось таке:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs і Notepad++ -- це популярні текстові редактори, що їх часто використовують розробники на Unix-похідних системах (на кшталт Linux та macOS) та на Windows.
Якщо ви використовуєте інші редактори або 32-бітові версії, ласкаво просимо знайти інструкції з налаштуванню вашого улюбленого редактора з Git у <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
Якщо ви не налаштуєте свій редактор, то потрапите в дійсно скрутне становище, коли Git спробує його запустити.
Наприклад, під Windows операція Git може бути завчасно припинена під час запуску редактора.
====

[[_new_default_branch]]
==== Типова назва гілки

Типово, Git буде створювати гілку з назвою _master_ коли ви створюєте нове сховище із `git init`.
Із версії Git 2.28 і вище, ви можете налаштувати іншу назву для початкової гілки.

Аби налаштувати _main_ як типову назву гілки, виконайте:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Перевірка налаштувань

Якщо ви хочете подивитися на свої налаштування, можете скористатися командою `git config --list`, щоб переглянути всі налаштування, які Git може знайти:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Ви можете побачити ключі більш ніж один раз, тому що Git читає однакові ключі з різних файлів (наприклад, `[path]/etc/gitconfig` або `~/.gitconfig`).
У цьому випадку, Git використовує останнє значення для кожного ключа.

Ви також можете перевірити значення конкретного ключа виконавши `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Оскільки Git може читати змінні конфігурації з кількох різних файлів, інколи може бути неочевидно, чому певна змінна має якесь несподіване значення.
В таких випадках, ви можете запитати у Git джерело для цього значення і він вкаже в якому саме файлі вказано остаточне значення змінної:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
